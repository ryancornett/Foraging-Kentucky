@using Foraging_Kentucky.Data
@using Foraging_Kentucky.Common
@using Foraging_Kentucky.Domain
@using System.Reflection
@inject IRepository<User> repo
@inject IJSRuntime JSRuntime
@page "/dashboard"

<PageTitle>Dashboard</PageTitle>

<h1>Dashboard</h1>
<p>Create or edit your username, update your email address, or delete your profile.</p>

<div class="btn-group d-flex" role="group" aria-label="Edit user group">
    <div class="mx-2">
        <button class="btn-primary shadow-none" @onclick="() => ToggleUserComps(_createNewUserVisibilityIndex)"><i class="fas fa-user-plus"></i> Register</button>
    </div>

    <div class="mx-2">
        <button class="btn-primary shadow-none" @onclick="() => ToggleUserComps(_myForagingVisibilityIndex)"><i class="fas fa-list"></i> My Saved Wild Foods</button>
    </div>

    <div class="mx-2">
        <button class="btn-primary shadow-none" @onclick="() => ToggleUserComps(_changeUserVisibilityIndex)"><i class="fas fa-user-pen"></i> Change Username</button>
    </div>

    <div class="mx-2">
        <button class="btn-primary shadow-none" @onclick="() => ToggleUserComps(_changeEmailVisibilityIndex)"><i class="fas fa-envelope"></i> Change Email</button>
    </div>

    <div class="mx-2">
        <button class="btn-primary shadow-none" @onclick="() => ToggleUserComps(_deleteProfileVisibilityIndex)"><i class="fas fa-trash"></i> Delete Profile</button>
    </div>
</div>

<UIMessage @ref="uiMessage" />

@if (Visibility[_createNewUserVisibilityIndex])
{
    <NewUser Parent ="@this" />
}
@if (Visibility[_myForagingVisibilityIndex])
{
    <MyForaging Parent="@this" />
}
@if (Visibility[_changeUserVisibilityIndex])
{
    <ChangeUsername Parent="@this" />
}
@if (Visibility[_changeEmailVisibilityIndex])
{
    <ChangeEmail Parent ="@this" />
}
@if (Visibility[_deleteProfileVisibilityIndex])
{
    <DeleteProfile Parent ="@this" />
}

@code {
    public UIMessage uiMessage;
    private const int _createNewUserVisibilityIndex = 0;
    private const int _myForagingVisibilityIndex = 4;
    private const int _changeUserVisibilityIndex = 1;
    private const int _changeEmailVisibilityIndex = 2;
    private const int _deleteProfileVisibilityIndex = 3;

    public bool[] Visibility = new bool[5] { false, false, false, false, false };

    public async Task ToggleUserComps(int buttonId)
    {
        for (var index = 0; index < Visibility.Length; index++)
        {
            if (buttonId == index)
            {
                Visibility[index] = !Visibility[index];
            }
            else { Visibility[index] = false; }
        }
        await RemoveComponentAndFadeAlert();
    }

    public async Task RemoveComponentAndFadeAlert()
    {
        StateHasChanged();
        await Task.Delay(2000);
        uiMessage.ClearAlert();
    }

    public void LogToConsole(string msg)
    {
        JSRuntime.InvokeVoidAsync("console.log", msg);
    }

    protected override async Task OnInitializedAsync()
    {
    }
}
