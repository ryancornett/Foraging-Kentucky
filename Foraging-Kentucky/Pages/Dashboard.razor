@using Foraging_Kentucky.Data
@using Foraging_Kentucky.Common
@using Foraging_Kentucky.Domain
@using System.Reflection
@inject IRepository<User> repo
@inject IJSRuntime JSRuntime
@page "/dashboard"

<PageTitle>Dashboard</PageTitle>

<h1>Dashboard</h1>
<p>Create or edit your username, update your email address, or delete your profile.</p>

<div class="btn-group d-flex" role="group" aria-label="Edit user group">
    <div class="mx-2">
        <button class="btn-primary shadow-none" @onclick="() => ToggleUserComps(1)"><i class="fas fa-user-plus"></i> Register</button>
    </div>

    <div class="mx-2">
        <button class="btn-primary shadow-none" @onclick="() => ToggleUserComps(5)"><i class="fas fa-list"></i> My Saved Wild Foods</button>
    </div>

    <div class="mx-2">
        <button class="btn-primary shadow-none" @onclick="() => ToggleUserComps(2)"><i class="fas fa-user-pen"></i> Change Username</button>
    </div>

    <div class="mx-2">
        <button class="btn-primary shadow-none" @onclick="() => ToggleUserComps(3)"><i class="fas fa-envelope"></i> Change Email</button>
    </div>

    <div class="mx-2">
        <button class="btn-primary shadow-none" @onclick="() => ToggleUserComps(4)"><i class="fas fa-trash"></i> Delete Profile</button>
    </div>
</div>

<UIMessage @ref="uiMessage" />

@if (isCreateNewUserVisible)
{
    <NewUser Parent ="@this" />
}
@if (isMyForagingVisible)
{
    <MyForaging Parent="@this" />
}
@if (isChangeUsernameVisible)
{
    <ChangeUsername Parent="@this" />
}
@if (isChangeEmailVisible)
{
    <ChangeEmail Parent ="@this" />
}
@if (isDeleteProfileVisible)
{
    <DeleteProfile Parent ="@this" />
}

@code {
    public UIMessage uiMessage;
    public bool isCreateNewUserVisible = false;
    public bool isMyForagingVisible = false;
    private bool isChangeUsernameVisible = false;
    private bool isChangeEmailVisible = false;
    private bool isDeleteProfileVisible = false;

    public async Task ToggleUserComps(int buttonId)
    {
        switch (buttonId)
        {
            case 1:
                isCreateNewUserVisible = !isCreateNewUserVisible;
                isMyForagingVisible = false;
                isChangeUsernameVisible = false;
                isChangeEmailVisible = false;
                isDeleteProfileVisible = false;
                break;

            case 2:
                isChangeUsernameVisible = !isChangeUsernameVisible;
                isCreateNewUserVisible = false;
                isMyForagingVisible = false;
                isChangeEmailVisible = false;
                isDeleteProfileVisible = false;
                break;

            case 3:
                isChangeEmailVisible = !isChangeEmailVisible;
                isCreateNewUserVisible = false;
                isMyForagingVisible = false;
                isChangeUsernameVisible = false;
                isDeleteProfileVisible = false;
                break;

            case 4:
                isDeleteProfileVisible = !isDeleteProfileVisible;
                isCreateNewUserVisible = false;
                isMyForagingVisible = false;
                isChangeUsernameVisible = false;
                isChangeEmailVisible = false;
                break;
            case 5:
                isMyForagingVisible = !isMyForagingVisible;
                isCreateNewUserVisible = false;
                isChangeUsernameVisible = false;
                isChangeEmailVisible = false;
                isDeleteProfileVisible = false;
                break;
        }
        await RemoveComponentAndFadeAlert();
    }

    public async Task RemoveComponentAndFadeAlert()
    {
        StateHasChanged();
        await Task.Delay(2000);
        uiMessage.ClearAlert();
    }

    public void LogToConsole(string msg)
    {
        JSRuntime.InvokeVoidAsync("console.log", msg);
    }

    protected override async Task OnInitializedAsync()
    {
    }
}
