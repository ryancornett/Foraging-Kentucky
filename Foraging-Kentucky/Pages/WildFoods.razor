@page "/wildfoods"
@using Foraging_Kentucky.Data
@using Foraging_Kentucky.Common
@using Foraging_Kentucky.Domain
@using System.Reflection;
@inject IJSRuntime JSRuntime
@inject IRepository<Item> repo
@inject IRepository<User> users

<PageTitle>Wild Foods</PageTitle>

<AddItem></AddItem>

<UIMessage @ref="uiMessage" />

<div class="form-inline col-md-3">
    <div class="form-group mb-2">
        <label for="selection" class="sr-only">Select Wild Foods to View</label>
        <select id="selection" name="selection" @bind="selection" class="form-control" required>
            <option disabled selected value>- select an option -</option>
            @foreach (var type in ItemOptions.ItemTypes)
            {
                <option value="@type">@type</option>
            }
            <option value="All">All (alphabetical)</option>
            <option value="Recent">Recently Added</option>
            <option value="First">First Added</option>
        </select>
    </div>
    <button class="btn-primary mb-2" @onclick="FilterFoods">Filter Wild Foods</button>
</div>

<label for="username" class="form-control">Key In Your Username to Save Items</label>
<textarea id="username" @bind="@username" class="form-control" />

<div class="container">
    <div class="row">
        <ItemCards WildFoodsParent="@this" Items="items" />
    </div>
</div>

@code {

    private List<Item> items;
    private string selection;
    public string username;
    public UIMessage uiMessage;
    public async Task FilterFoods()
    {
        switch (selection)
        {
            case "All":
                items = await repo.RetrieveByAlphabeticalOrder();
                Logger.Log(selection, "Testing");
                break;

            case "Recent":
                items = await repo.RetrieveByRecentlyAdded();
                Logger.Log(selection, "Testing");
                break;

            case "First":
                items = await repo.RetrieveByFirstAdded();
                Logger.Log(selection, "Testing");
                break;

            default:
                Logger.Log(selection, "Testing");
                items = await repo.RetrieveByProperty(selection);
                if (items == null)
                {
                    uiMessage.AlertMessage("None found");
                    ChangeStateAndFadeAlert();
                }
                break;
        }
        ChangeStateAndFadeAlert();
    }

    public async Task ChangeStateAndFadeAlert()
    {
        StateHasChanged();
        await Task.Delay(2000);
        uiMessage.ClearAlert();
    }

    protected override async Task OnInitializedAsync()
    {
        items = await repo.GetListAsync();
        string methodName = MethodBase.GetCurrentMethod().Name;
        if (items == null)
        {
            Logger.Log(methodName, $"{Logger.error} No items were found.");
        }
        ChangeStateAndFadeAlert();
    }
}