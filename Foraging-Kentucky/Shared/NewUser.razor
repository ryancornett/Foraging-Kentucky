@using Foraging_Kentucky.Data
@using Foraging_Kentucky.Common
@using Foraging_Kentucky.Domain
@using System.Reflection
@using Foraging_Kentucky.Models;
@inject IRepository<User> repo
@inject IJSRuntime JSRuntime

<h3>New User</h3>

<EditForm Model="@newUser" OnValidSubmit="AddThisUser" class="form-control">
    <div class="row my-1">
        <div class="col-md-4">
            <label for="username" class="form-label">Create a Username</label>
            <InputText id="username" placeholder="Username" @bind-Value="@newUser.Name" class="form-control" />
        </div>
    </div>

    <div class="row my-1">
        <div class="col-md-4">
            <label for="email" class="form-label">Enter your Email Address</label>
            <InputText id="email" placeholder="Email" @bind-Value="@newUser.Email" class="form-control" />
        </div>
    </div>

    <button type="submit" class="btn-primary">Create User</button>

</EditForm>

<p class="@paragraphClass" role="alert">@alert</p>

@code {
    private NewUserModel newUser = new NewUserModel();

    private void AddThisUser()
    {
        var method = MethodBase.GetCurrentMethod().Name;
        if (!Validators.ValidateUsername(newUser.Name))
        {
            string message = "Please enter a valid username (6-30 characters, no special characters except underscore).";
            AlertMessage(message);
            newUser.Log(method, $"{Logger.error} - {message}");
            LogToConsole(message);
        }
        else if (!Validators.ValidateEmail(newUser.Email))
        {
            string message = "'Email' must be in a valid format. Please try again.";
            AlertMessage(message);
            newUser.Log(method, $"{Logger.error} - {message}");
            LogToConsole(message);
        }
        else
        {
            if (repo.CheckIfExists(newUser.Name))
            {
                string message = "User already exists.";
                AlertMessage(message);
                newUser.Log(method, $"{Logger.invalid} - {message}");
                LogToConsole(message);
            }
            else
            {
                User userEntity = new User(newUser.Name, newUser.Email);
                repo.Add(userEntity);
                ClearAlert();
                userEntity.Log(method, $"{Logger.success} - New user {userEntity.Name} added.");
                newUser = new NewUserModel();
            }
        }
    }
    
    public string paragraphClass = "valid";
    public string? alert;

    private void AlertMessage(string message)
    {
        paragraphClass = "invalid validation-message";
        alert = message;
    }

    private void ClearAlert()
    {
        paragraphClass = "valid";
        alert = string.Empty;
    }

    private void LogToConsole(string msg)
    {
        JSRuntime.InvokeVoidAsync("console.log", msg);
    }
}
