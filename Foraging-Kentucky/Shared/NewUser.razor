@using Foraging_Kentucky.Data
@using Foraging_Kentucky.Common
@using Foraging_Kentucky.Domain
@using System.Reflection
@using Foraging_Kentucky.Models;
@using Foraging_Kentucky.Pages;
@inject IRepository<User> repo

<h3>New User</h3>

<EditForm Model="@newUser" OnValidSubmit="AddThisUser" class="form-control">
    <div class="row my-1">
        <div class="col-md-4">
            <label for="username" class="form-label">Create a Username</label>
            <InputText id="username" placeholder="Username" @bind-Value="@newUser.Name" class="form-control" />
        </div>
    </div>

    <div class="row my-1">
        <div class="col-md-4">
            <label for="email" class="form-label">Enter your Email Address</label>
            <InputText id="email" placeholder="Email" @bind-Value="@newUser.Email" class="form-control" />
        </div>
    </div>

    <button type="submit" class="btn-primary">Create User</button>

</EditForm>

@code {
    [Parameter]
    public Dashboard Parent { get; set; }

    private UserModel newUser = new UserModel();

    private async Task AddThisUser()
    {
        var method = MethodBase.GetCurrentMethod().Name;
        if (newUser.Name == null || !Validators.ValidateUsername(newUser.Name))
        {
            string message = "Please enter a valid username (6-30 characters, no special characters except underscore).";
            Parent.uiMessage.AlertMessage(message);
            newUser.Log(method, $"{Logger.invalid} - {newUser.Name} - {message}");
        }
        else if (newUser.Email == null || !Validators.ValidateEmail(newUser.Email))
        {
            string message = "'Email' must be in a valid format. Please try again.";
            Parent.uiMessage.AlertMessage(message);
            newUser.Log(method, $"{Logger.invalid} - {newUser.Name} - {message}");
        }
        else
        {
            if (repo.CheckIfExists(newUser.Name))
            {
                string message = "User already exists.";
                Parent.uiMessage.AlertMessage(message);
                newUser.Log(method, $"{Logger.error} - {newUser.Name} - {message}");
            }
            else
            {
                User userEntity = new User(newUser.Name, newUser.Email);
                Parent.uiMessage.SuccessMessage($"New user {userEntity.Name} successfully added!");
                await repo.Add(userEntity);
                userEntity.Log(method, $"{Logger.success} - New user {userEntity.Name} added.");
                newUser = new UserModel();
                Parent.ToggleUserComps(1);
            }
        }
    }
}
