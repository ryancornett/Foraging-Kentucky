@using Foraging_Kentucky.Common;
@using Foraging_Kentucky.Data;
@using Foraging_Kentucky.Domain;
@using Foraging_Kentucky.Models;
@using Foraging_Kentucky.Pages;
@using System.Reflection;
@inject IRepository<User> repo

<h3>Delete Your Profile</h3>

<div class="row my-1">
    <div class="col-md-4">
        <label for="username" class="form-label">Username</label>
        <input id="username" placeholder="Username" @bind="@username" class="form-control" />
    </div>
</div>

<EditForm Model="@userModel" OnValidSubmit="DeleteThisUser" class="form-control">
    <div class="row my-1">
        <div class="col-md-4">
            <label for="confirm-username" class="form-label">Confirm Your Username</label>
            <InputText id="confirm-username" placeholder="New" @bind-Value="@userModel.Name" class="form-control" />
        </div>
    </div>

    <button type="submit" class="btn-primary">Delete My Profile</button>

</EditForm>


@code {
    [Parameter]
    public Dashboard Parent { get; set; }
    private string? username;
    private UserModel userModel = new UserModel();

    private async Task DeleteThisUser()
    {
        var method = MethodBase.GetCurrentMethod().Name;
        if (username == null || !repo.CheckIfExists(username))
        {
            string message = "The username in the first field does not exist. Please try again.";
            Parent.uiMessage.AlertMessage(message);
            username.Log(method, $"{Logger.invalid} - {username} - {message}");
        }
        else if (userModel.Name == null || !repo.CheckIfExists(userModel.Name))
        {
            string message = "The username in the confirmation field does not exist. Please try again.";
            Parent.uiMessage.AlertMessage(message);
            userModel.Name.Log(method, $"{Logger.invalid} - {userModel.Name} - {message}");
        }
        else
        {
            var thisUser = repo.Retrieve(username);
            await repo.Delete(thisUser);
            Parent.uiMessage.SuccessMessage("User profile deleted. We hope you'll consider joining again.");
            username.Log(method, $"{Logger.success} - {username}'s user profile/entity was deleted.");
            userModel = new UserModel();
            username = string.Empty;
            Parent.ToggleDeleteProfile();
        }
    }
}