2023-11-21 09:33:21 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 09:53:07 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 10:18:39 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 10:22:59 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 10:28:38 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 10:29:42 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 10:31:49 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 11:02:47 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 11:09:41 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 11:14:28 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 11:16:13 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 11:26:31 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 11:26:49 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 11:48:08 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 11:52:52 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 12:05:03 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 12:22:05 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 12:26:39 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 12:57:52 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 13:00:08 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 13:02:05 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 13:04:19 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 13:07:25 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 13:08:51 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 13:10:47 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 13:21:39 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 13:23:36 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 13:26:00 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 13:29:51 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 13:43:08 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 13:44:22 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 15:24:36 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 15:55:40 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 15:57:38 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-21 15:59:16 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-22 15:54:04 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-28 18:56:07 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-28 19:16:12 : SeedDatabase - The operation was successful. The database was seeded.
2023-11-28 19:18:47 : SeedDatabase - The operation was successful. The database was seeded.
2024-01-05 08:10:10 : Fruit - Testing
2024-01-05 08:10:16 : All - Testing
2024-01-05 08:10:21 : First - Testing
2024-01-05 16:56:26 : Foraging_Kentucky.Domain.User - An error occurred. - Dave - System.InvalidOperationException: The instance of entity type 'Item' cannot be tracked because another instance with the same key value for {'Id'} is already being tracked. When attaching existing entities, ensure that only one entity instance with a given key value is attached. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the conflicting key values.
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.ThrowIdentityConflict(InternalEntityEntry entry)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(TKey key, InternalEntityEntry entry, Boolean updateDuplicate)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(TKey key, InternalEntityEntry entry)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(InternalEntityEntry entry)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTracking(InternalEntityEntry entry)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState oldState, EntityState newState, Boolean acceptChanges, Boolean modifyProperties)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState entityState, Boolean acceptChanges, Boolean modifyProperties, Nullable`1 forceStateWhenUnknownKey, Nullable`1 fallbackState)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.PaintAction(EntityEntryGraphNode`1 node)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator.TraverseGraph[TState](EntityEntryGraphNode`1 node, Func`2 handleNode)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.AttachGraph(InternalEntityEntry rootEntry, EntityState targetState, EntityState storeGeneratedWithKeySetTargetState, Boolean forceStateWhenUnknownKey)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.NavigationCollectionChanged(InternalEntityEntry entry, INavigationBase navigationBase, IEnumerable`1 added, IEnumerable`1 removed)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.NavigationCollectionChanged(InternalEntityEntry entry, INavigationBase navigationBase, IEnumerable`1 added, IEnumerable`1 removed)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectNavigationChange(InternalEntityEntry entry, INavigationBase navigationBase)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.LocalDetectChanges(InternalEntityEntry entry)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectChanges(IStateManager stateManager)
   at Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges()
   at Microsoft.EntityFrameworkCore.DbContext.TryDetectChanges()
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Foraging_Kentucky.Data.UserRepository.AddItemToUserList(User user, Item item) in C:\CS\Foraging-Kentucky\Foraging-Kentucky\Data\UserRepository.cs:line 82
2024-01-05 17:02:46 : Foraging_Kentucky.Domain.User - An error occurred. - Dave - System.InvalidOperationException: The instance of entity type 'Item' cannot be tracked because another instance with the same key value for {'Id'} is already being tracked. When attaching existing entities, ensure that only one entity instance with a given key value is attached. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the conflicting key values.
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.ThrowIdentityConflict(InternalEntityEntry entry)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(TKey key, InternalEntityEntry entry, Boolean updateDuplicate)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(TKey key, InternalEntityEntry entry)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(InternalEntityEntry entry)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTracking(InternalEntityEntry entry)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState oldState, EntityState newState, Boolean acceptChanges, Boolean modifyProperties)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState entityState, Boolean acceptChanges, Boolean modifyProperties, Nullable`1 forceStateWhenUnknownKey, Nullable`1 fallbackState)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.PaintAction(EntityEntryGraphNode`1 node)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator.TraverseGraph[TState](EntityEntryGraphNode`1 node, Func`2 handleNode)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.AttachGraph(InternalEntityEntry rootEntry, EntityState targetState, EntityState storeGeneratedWithKeySetTargetState, Boolean forceStateWhenUnknownKey)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.NavigationCollectionChanged(InternalEntityEntry entry, INavigationBase navigationBase, IEnumerable`1 added, IEnumerable`1 removed)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.NavigationCollectionChanged(InternalEntityEntry entry, INavigationBase navigationBase, IEnumerable`1 added, IEnumerable`1 removed)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectNavigationChange(InternalEntityEntry entry, INavigationBase navigationBase)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.LocalDetectChanges(InternalEntityEntry entry)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectChanges(IStateManager stateManager)
   at Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges()
   at Microsoft.EntityFrameworkCore.DbContext.TryDetectChanges()
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Foraging_Kentucky.Data.UserRepository.AddItemToUserList(User user, Item item)
2024-01-05 17:24:59 : Recent - Testing
